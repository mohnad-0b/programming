from z3 import *
v5 = [BitVec('v5_%d' % i, 8) for i in range(8)]
v6 = [BitVec('v6_%d' % i, 8) for i in range(8)]
v7 = [BitVec('v7_%d' % i, 8) for i in range(8)]
v8 = [BitVec('v8_%d' % i, 8) for i in range(8)]
v9 = [BitVec('v9_%d' % i, 8) for i in range(8)]
v10 = [BitVec('v10_%d' % i, 8) for i in range(8)]
v11 = [BitVec('v11_%d' % i, 8) for i in range(8)]
v12 = [BitVec('v12_%d' % i, 8) for i in range(8)]
v13 = [BitVec('v13_%d' % i, 8) for i in range(8)]
v14 = [BitVec('v14_%d' % i, 8) for i in range(8)]
v15 = [BitVec('v15_%d' % i, 8) for i in range(8)]
s = [BitVec('s_%d' % i, 8) for i in range(8)]

sol = Solver()
sol.add()
sol.add(v10[0] * v6[5] == 20)
sol.add(v8[0] - v8[4] == 0xFA)
sol.add(v8[5] - v7[2] == 0xD6)
sol.add(v6[0] - v10[0] == 8)
sol.add(v10[7] - v5[0] == 0xD5)
sol.add(s[7] * v7[2] == 0xED)
sol.add(v7[0] * s[4] == 0xC8)
sol.add((v7[4] ^ v8[2]) == 85)
sol.add(v7[6] - v10[7] == 52)
sol.add(v10[2] + v11[3] == 0x8F)
sol.add(v7[3] + v9[4] == 0xD6)
sol.add((v5[6] ^ v6[1]) == 49)
sol.add(v6[4] * v11[0] == 0xAC)
sol.add(v11[2] - v7[2] == 0xC2)
sol.add((s[6] ^ v7[2]) == 47)
sol.add((v8[7] ^ v5[6]) == 90)
sol.add((v8[7] ^ v9[4]) == 64)
sol.add(v9[0] == v7[2])
sol.add(v10[1] + v6[7] == 0x98)
sol.add(v11[3] * v6[7] == 104)
sol.add(s[1] - v7[4] == 0xDB)
sol.add(v7[0] - v7[5] == 0xD2)
sol.add(v8[6] - v7[0] == 46)
sol.add(s[4] * v9[4] == 0xA0)
sol.add(v7[3] * v8[6] == 94)
sol.add(v5[7] - v9[0] == 0xC8)
sol.add((v10[5] ^ v10[1]) == 86)
sol.add((v9[5] ^ v7[2]) == 43)
sol.add((v5[1] ^ v10[6]) == 25)
sol.add(v7[4] - v9[7] == 26)
sol.add(v6[3] + v10[2] == 0xA1)
sol.add(v11[1] + v8[5] == 86)
sol.add((v6[2] ^ v7[5]) == 56)
sol.add((v11[4] ^ v9[4]) == 9)
sol.add(v8[6] * v5[7] == 121)
sol.add((v7[6] ^ v8[5]) == 93)
sol.add(v8[0] * s[2] == 92)
sol.add(v6[2] * v5[2] == 57)
sol.add(v7[5] == v6[5])
sol.add(v6[5] * v8[3] == 47)
sol.add(v8[5] * v5[0] == 0xAB)
sol.add(v7[2] + v8[7] == 0x93)
sol.add((v8[2] ^ v7[2]) == 115)
sol.add((v7[7] ^ v6[4]) == 64)
sol.add(v6[0] + v7[1] == 0xA9)
sol.add((v11[3] ^ v8[7]) == 21)
sol.add(v11[3] + s[0] == 105)
sol.add(v9[6] + v8[2] == 0xA5)
sol.add((v10[4] ^ v7[6]) == 55)
sol.add(v7[4] * s[0] == 8)
sol.add(v8[2] - v11[0] == 0xC5)
sol.add(v11[4] + v6[2] == 0xE4)
sol.add(v6[0] * v11[0] == 0xAC)
sol.add(v10[6] - v9[7] == 13)
sol.add(v10[7] + v7[6] == 0x9C)
sol.add(v8[1] + s[6] == 0xD4)
sol.add(v7[5] * s[7] == 0xED)
sol.add(v8[5] * s[1] == 100)
sol.add(v6[3] * s[2] == 38)
sol.add((v6[6] ^ v7[2]) == 43)
sol.add(s[7] + s[1] == 0x87)
sol.add((s[0] ^ v7[3]) == 42)
sol.add(v6[5] - s[1] == 11)
sol.add(v10[6] + v7[3] == 0xCE)
sol.add((v5[5] ^ v6[1]) == 59)
sol.add(v6[3] - v11[2] == 18)
sol.add(v6[1] == v5[2])
sol.add(v5[6] - v11[2] == 77)
sol.add(v10[4] * v9[2] == 78)
sol.add(v10[2] == v8[0])
sol.add((v10[3] ^ v9[7]) == 56)
sol.add(v7[1] + v8[6] == 0x94)
sol.add(v10[4] + v9[1] == 0xCF)
sol.add(v9[4] == v6[4])
sol.add(v7[1] + v5[4] == 102)
sol.add(v8[4] + v11[4] == 0xF1)
sol.add(v9[1] - v6[5] == 17)
sol.add(v8[4] - v10[1] == 68)
sol.add(v5[1] - v8[3] == 68)
sol.add((v10[3] ^ v10[5]) == 1)
sol.add((v11[1] ^ v8[2]) == 13)
sol.add(v5[3] - v7[4] == 0xEB)
sol.add(v7[0] + v6[7] == 0x99)
sol.add(v5[5] + v7[0] == 0x95)
sol.add(v5[4] - s[0] == 0xE9)
sol.add(v7[7] + v8[2] == 96)
sol.add(v10[5] + s[5] == 0x96)
sol.add(v9[2] * v10[1] == 96)
sol.add(v6[5] * v10[0] == 20)
sol.add(v7[3] - v10[4] == 3)
sol.add(v6[4] + v11[1] == 0x95)
sol.add(v10[5] * v5[2] == 0xDA)
sol.add(v9[1] + s[1] == 0xC4)
sol.add(v9[7] - s[1] == 11)
sol.add(v9[3] == v6[3])
sol.add(v9[7] + v8[7] == 0x93)
sol.add(v11[2] * v5[4] == 81)
sol.add(v7[2] * v5[0] == 65)
sol.add(v9[6] - v7[7] == 69)
sol.add(v8[5] + s[7] == 104)
sol.add(s[4] + v8[4] == 0xBC)
sol.add(v8[0] + v7[7] == 0xA2)
sol.add(s[5] + v7[1] == 101)
sol.add(v7[5] * v9[3] == 0xED)
sol.add((v9[5] ^ v5[5]) == 16)
sol.add(v10[0] - v5[4] == 59)
sol.add(v6[7] - v5[0] == 9)
sol.add((v9[2] ^ s[7]) == 65)
sol.add(s[5] - v9[3] == 0xFD)
sol.add((v6[2] ^ v11[4]) == 26)
sol.add((s[3] ^ s[1]) == 47)
sol.add(v6[1] - v8[7] == 43)
sol.add(v6[4] + v5[0] == 0xD3)
sol.add(v10[5] * v5[3] == 0xD8)
sol.add(s[6] + v7[3] == 0xD2)
sol.add(s[3] + s[5] == 0xAB)
sol.add(v8[3] - v9[7] == 0xD2)

if sol.check() == sat:
    m = sol.model()
    # print(m)
    print(''.join([chr(m[s[i]].as_long()) for i in range(8)]), end='')
    print(''.join([chr(m[v5[i]].as_long()) for i in range(8)]), end='')
    print(''.join([chr(m[v6[i]].as_long()) for i in range(8)]), end='')
    print(''.join([chr(m[v7[i]].as_long()) for i in range(8)]), end='')
    print(''.join([chr(m[v8[i]].as_long()) for i in range(8)]), end='')
    print(''.join([chr(m[v9[i]].as_long()) for i in range(8)]), end='')
    print(''.join([chr(m[v10[i]].as_long()) for i in range(8)]), end='')
    print(''.join([chr(m[v11[i]].as_long()) for i in range(5)]), end='')
else:
    print('unsat')

# HTB{H0p3_u_d1dn't_g3t_th15_by_h4nd,1t5_4_pr3tty_l0ng_fl4g!!!}