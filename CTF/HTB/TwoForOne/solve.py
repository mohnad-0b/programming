from base64 import b64decode
from math import gcd
from Crypto.Util.number import *
from Crypto.PublicKey import RSA

def egcd(a, b):
    if (a == 0):
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)


with open("key1.pem", "r") as f:
    key = RSA.importKey(f.read())
    e1, n1 = int(key.e), int(key.n)

# e1: 65537
# n1: 25080356853331150673712092961488349508728123694382279186941974911344272809718201683391687288116618021523872262260746884803456249468108932413753368793568123710905490623939699616018064364038794824072468125668702688048418916712950393799664781694224559810656290997284081084848717062228887604668548576609649709572412523306016494962925450783098637867249337121156908328927249731928363360657779226929980928871118145919627109584218577535657544952661333527174942990937484743860494188129607347202336812042045820577108243818426559386634634103676467773122325120858908782192357380855678371737765634819794619802582481594876770433687

with open("key2.pem", "r") as f:
    key = RSA.importKey(f.read())
    e2, n2 = int(key.e), int(key.n)

# e2: 343223
# n2: 25080356853331150673712092961488349508728123694382279186941974911344272809718201683391687288116618021523872262260746884803456249468108932413753368793568123710905490623939699616018064364038794824072468125668702688048418916712950393799664781694224559810656290997284081084848717062228887604668548576609649709572412523306016494962925450783098637867249337121156908328927249731928363360657779226929980928871118145919627109584218577535657544952661333527174942990937484743860494188129607347202336812042045820577108243818426559386634634103676467773122325120858908782192357380855678371737765634819794619802582481594876770433687


c1 = bytes_to_long(b64decode(open("message1", "r").read()))
c2 = bytes_to_long(b64decode(open("message2", "r").read()))

# c1: 8594739868876680707675659016159091563273584050369375950242195770991985751729356943091899761473341291546661534147258656877825139086500091040617652094855021591398492538572216465830151885150866698687813609757241661134852133236647736448846795228837041663980105388630399254623400292374764088879771776258769880958138023567695123751475783512305920321873148437529860129721514911011664960408177073316275848645103557111546319930551097593655187005769611196978822316524564186956633937052709223153253583888062392105701720354464100056936079773122224640447666351684956499409479530121904229950873301825858239776465086336263230151265
# c2: 9737027336037359059189248653679479427760188707203304287705632234993664506626123200516407026320173088526048363775672136201944486068900961289281511759124703185525781907023718591537140497089486516357163358274830974985133454207308289104762031156987452678907264944412120806562013919024217316734003384146053985204517946479956544972421196845361293576517703149631157048335812327595437685796667996304507869204299933253742587966189328252497087859067902096687435207697296287968225335189169808265606023730126351142710537018190090972355511636524768521564113646456807645911569219557472394154709126691533838106909146132258511478059

if gcd(e1, e2) != 1:
    print("[ERROR] The greatest common denominator between the exponent of each keys should be 1")
    exit(2)

a,x,y = (egcd(e1, e2))

C1 = pow(c1, x, n1) # C1: 5741600652144740752346757010997427070201002140854924363541226764511796981018514206326183794110641620083744505544272164301207793505451335543109001661570356008865371852957176530755775016108411338424497569133768258288680787973035800599690672241269214230971277169821770082205495941986756746279218758175511729906752867751835805273118886031326925442062262745306047076202312654725892633612454850087597118931657611986719841172379024980678618340050260128666390876524995260501523434052105316774314734842454721038247521865383792941697006463923090873507008356526377928489231779940934224157388832123036968089308237931086978724994
C2 = pow(c2, y, n1) # C2: 11178937514231045106916140317822572362807843846900091031581948312764166735973220593592773331047517743301089351759702271118401223297248032818691242888223883926816447921003292035309420416268854212023513398418587784814255160438330785984809902662183910137709066012127045096998819821605228540254667982094335465621651750239479330240148899801235890441551673466479256702362798837815459525207151139354310238267416934503475124585916637211456353224120017100810940416137867004856108369519222141166423100086174978173423746384755414660525437330354029757730879409021268242231959954013417520184605444151304352558623573903172213827454

m = (C1 * C2) % n1 # flag in bytes : 29754482138600667824873548828684976503132905299031678355938493565

print("FLAG :",long_to_bytes(m))

