from Crypto.Util.number import  long_to_bytes ,isPrime
import math

n1 =  20419911831172302875672147881591955150374905374923489828579309333526913412479529155421876806046325615303646728094757154242014118795438414097972835115916518900305917451026195843072080160377800030218325871329516570580080618564152118359283842029977016171219589378840858546816360317826285298153876895088233151963826187485005613326731641916705708755374335661978892340307066603299080548210753931907690978068524117740563261153477547032727664785170581979703746726057914083849065826679834809144636895511518099624348245064944954463178978972704114145085158372055451462531743235334057987866213582096817622105195455035987520230771
n2 =  1683923780859874611930794630623572467391214991131583691307976335009766681270303298496341057762051051673652566867777794452947787923798265440958182746290888248620096911855932829856489573744124873488202613156033168079165819754310830161064749327565384087704840898794012258558101936057049167964855243121174447676707368016269059485528628659002019914522774146261134486794982081618009908881006867167542316945589686519530915034430649238722694956765636502468210716054949537
c1 =  6582056051462988318857324814305549607825201849518919032538046731004879874056294941822298669689324004631884421166933164205757238843935695649965887545503086675940347822501471379256483282610434288224578980619655618714515796836054487159956334294645010699692623300309495613792960429191208726517598789336324253982139244862415966192336702102746918608096571457344640268565964386814686662936020860709611227399437831723372245319567945450943773668831089229113649431723808142797877573826718258391063622498895269660437325060336710502325475056619591106228670094691062159227202152680994711438438166859809364574193161145282011935175
c2 =  429135441192262399426420878452680094107702256308383409262131558498290393439486196090120674097630164769769940621415673655954176671140126079965983513206245996250937823638922318816406530702589584901774576765099736024457778343466955319557502268618947452676942913960713995089956474403983112521271275316640453841298559589257883193949129972569972010769117806402049203659290188232753717185283906106969917331409463195763132451286421641848628165758367834696327664214233614
z =  9015282767084870580575872320903199602132602946495198310494305564199571252864701364127634512970348169009361044592253714163579439124955840605099570543620561
e =  65537

##################################################################
#            part 1: Find the first half of the flag             #
##################################################################

def fermat(n):

    a = math.isqrt(n)
    b = a*a-n
    while (b<0):
        a = a+1
        b = a*a-n
    # check if b is a perfect square
    while (math.isqrt(b)*math.isqrt(b) != b):
        a = a+1
        b = a*a-n
    p = a + math.isqrt(b)
    q = a - math.isqrt(b)
    return p,q

# Solve part 1

# find p and q
p1, q1 = fermat(n1)

# find c
inv_z = pow(z,-1,n1)
c1_original = (c1*inv_z)%n1

# print((c1_original*z)% n1 == c1) # True

# print(p1 * q1 == n1) # True
# print(isPrime(p1)) # 0 -> false
# print(isPrime(q1)) # 0

# then find factor for p1 and q1

factor1, factor2 = fermat(p1)
factor3, factor4 = fermat(q1)

# print(isPrime(factor1)) # 1 -> true
# print(isPrime(factor2)) # 1
# print(isPrime(factor3)) # 1
# print(isPrime(factor4)) # 1

# 4 factors for n, so phi1 will be (p1-1)*(q1-1)*(p2-1)*(q2-1)
phi1 = (factor1-1)*(factor2-1)*(factor3-1)*(factor4-1)
d1 = pow(e,-1,phi1)
m1 = pow(c1_original,d1,n1)
flagpart1 = long_to_bytes(m1)

# find first Half of flag b"JISCTF{1_Th1nK_1t's_E@sy_RSA_52"

##################################################################
#             part 2: Find the second half of the flag           #
##################################################################

# print(isPrime(math.gcd(n1,n2))) # 1
q2 = math.gcd(n1,n2)
p2 = n2//q2

phi2 = (p2-1)*(q2-1)
d2 = pow(e,-1,phi2)

inv_m1 = pow(m1,-1,n2)
c2 = c2 * inv_m1  % n2

for i in range(1000,90000):

    inv_int = pow(i,-1,n2)
    c2_original = (c2*inv_int)%n2
    m2 = long_to_bytes(pow(c2_original,d2,n2))
    try:
        m2.decode()
        flagpart2 = m2
        print(i)
        break
    except UnicodeDecodeError:
        continue
print(flagpart1 + flagpart2)

# find second Half of flag b"d5deac237bcd845387d78a0f8c434c}" , i = 56537

###############################################################################
# full flag: b"JISCTF{1_Th1nK_1t's_E@sy_RSA_52d5deac237bcd845387d78a0f8c434c}"#
###############################################################################

#################################
# Challenge Easy Encryption :") #
# 1 solve but not me :(         #
# 100 points                    #
#################################

# from SECRETS import flag,e,n1,n2,z
# from random import randint

# m1 = bytes_to_long(flag[:len(flag)/2])
# m2 = bytes_to_long(flag[len(flag)/2:])

# c1 = (z * pow(m1,e,n1)) % n1
# c2 = (m1 * randint(1000,90000) * pow(m2,e,n2)) % n2

# print("n1 = ",n1)
# print("n2 = ",n2)
# print("c1 = ",c1)
# print("c2 = ",c2)
# print("z = ",z)
# print("e = ",e)

# """
# n1 =  20419911831172302875672147881591955150374905374923489828579309333526913412479529155421876806046325615303646728094757154242014118795438414097972835115916518900305917451026195843072080160377800030218325871329516570580080618564152118359283842029977016171219589378840858546816360317826285298153876895088233151963826187485005613326731641916705708755374335661978892340307066603299080548210753931907690978068524117740563261153477547032727664785170581979703746726057914083849065826679834809144636895511518099624348245064944954463178978972704114145085158372055451462531743235334057987866213582096817622105195455035987520230771
# n2 =  1683923780859874611930794630623572467391214991131583691307976335009766681270303298496341057762051051673652566867777794452947787923798265440958182746290888248620096911855932829856489573744124873488202613156033168079165819754310830161064749327565384087704840898794012258558101936057049167964855243121174447676707368016269059485528628659002019914522774146261134486794982081618009908881006867167542316945589686519530915034430649238722694956765636502468210716054949537
# c1 =  6582056051462988318857324814305549607825201849518919032538046731004879874056294941822298669689324004631884421166933164205757238843935695649965887545503086675940347822501471379256483282610434288224578980619655618714515796836054487159956334294645010699692623300309495613792960429191208726517598789336324253982139244862415966192336702102746918608096571457344640268565964386814686662936020860709611227399437831723372245319567945450943773668831089229113649431723808142797877573826718258391063622498895269660437325060336710502325475056619591106228670094691062159227202152680994711438438166859809364574193161145282011935175
# c2 =  429135441192262399426420878452680094107702256308383409262131558498290393439486196090120674097630164769769940621415673655954176671140126079965983513206245996250937823638922318816406530702589584901774576765099736024457778343466955319557502268618947452676942913960713995089956474403983112521271275316640453841298559589257883193949129972569972010769117806402049203659290188232753717185283906106969917331409463195763132451286421641848628165758367834696327664214233614
# z =  9015282767084870580575872320903199602132602946495198310494305564199571252864701364127634512970348169009361044592253714163579439124955840605099570543620561
# e =  65537
# """
