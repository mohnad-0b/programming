from string import printable
from z3 import *

flagenc = [2601946957773627160, 4526826033798232490, 4115963181275217310, 4317730219890856776, 19825098744971818990, 7994607929439150520, 7673525817759915202, 15151909612378817758, 10533001901535379282, 8325662490991506814, 7060471777019565078, 15151909612378817758, 13152639177954788342, 16794702891561008936, 11788321211725313768, 9018508570254403722, 14632089906991037688, 7060471777019565078, 9018508570254403722, 14125761575358114338, 16232975439358570474, 7673525817759915202, 15685458246942294472, 10533001901535379282, 13152639177954788342, 12685380367624017736, 7060471777019565078, 5199850070881740152, 461753089414422552, 14632089906991037688, 7060471777019565078, 11358068561134586894, 588226323464377950, 588226323464377950, 588226323464377950, 588226323464377950, 18567594925062896818, 7060471777019565078, 501379163426405794, 588226323464377950, 588226323464377950, 795251480951227910, 7060471777019565078, 270946952611850392, 389592350866904648, 270946952611850392, 7060471777019565078, 1749348034276597310, 14632089906991037688, 18567594925062896818, 13632689135315468568, 15685458246942294472, 461753089414422552, 7060471777019565078, 8325662490991506814, 635655070274178248, 15685458246942294472, 7060471777019565078, 501379163426405794, 14632089906991037688, 685895824227502954, 9018508570254403722, 10533001901535379282, 8666893885737623688, 7673525817759915202, 15685458246942294472, 21145420677208472954]
# n = 75610089333048750861240285201209617149804326723066738587197417311512110234929
# https://www.alpertron.com.ar/ECM.HTM
y = 268405063919682362897667254807498976667
#   268405063919682362897667254807498976667

a = [Int(f'a{x}') for x in range(5)]
# guessing
key = 1337

print("Solving...")
s = Solver()

# flag starts with 'JUST{'
s.add((a[0]*pow(ord("J"),4)+a[1]*pow(ord("J"),3)+a[2]*pow(ord("J"),2)+a[3]*ord("J")+a[4]) == flagenc[0]^((y%key)))
s.add((a[0]*pow(ord("U"),4)+a[1]*pow(ord("U"),3)+a[2]*pow(ord("U"),2)+a[3]*ord("U")+a[4]) == flagenc[1]^((y%key)))
s.add((a[0]*pow(ord("S"),4)+a[1]*pow(ord("S"),3)+a[2]*pow(ord("S"),2)+a[3]*ord("S")+a[4]) == flagenc[2]^((y%key)))
s.add((a[0]*pow(ord("T"),4)+a[1]*pow(ord("T"),3)+a[2]*pow(ord("T"),2)+a[3]*ord("T")+a[4]) == flagenc[3]^((y%key)))
s.add((a[0]*pow(ord("{"),4)+a[1]*pow(ord("{"),3)+a[2]*pow(ord("{"),2)+a[3]*ord("{")+a[4]) == flagenc[4]^((y%key)))

if s.check() == sat:
    model = s.model()
else:
    print("no solution")
    exit()

arry = []
for x in a:
    arry.append(model[x].as_long())

if not((arry[0]*pow(74,4)+arry[1]*pow(74,3)+arry[2]*pow(74,2)+arry[3]*74+arry[4] )^(y%key) == flagenc[0]) :
    exit()

dkey = {}
for i in printable:
    dkey[arry[0]*pow(ord(i),4)+arry[1]*pow(ord(i),3)+arry[2]*pow(ord(i),2)+arry[3]*ord(i)+arry[4] ] = i
print("flag is : ", end='')

for c in flagenc:
    print(dkey[c^(y%key)], end='')
print()

# JUST{basic_sovler_equation_X0r_k3333y_1337_*.*_Crypt0_c4t_1r5eidat}
